{
  // Components
  "reactNativeComponent": {
    "prefix": "rnf",
    "body": [
      "import React, { useCallback, useEffect, useMemo, useState } from 'react';",
      "import { Text, View } from 'react-native';",
      "import PropTypes from 'prop-types';",
      "",
      "export function ${1:${TM_FILENAME_BASE}}(props) {",
      "",
      "  return (",
      "    <View>",
      "        <Text>${2:${TM_FILENAME_BASE}}</Text>",
      "    </View>",
      "  );",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "",
      "};",
      "",
      "${1:${TM_FILENAME_BASE}}.defaultProps = {",
      "",
      "};",
      ""
    ],
    "description": "React Native Functional Component with export"
  },
  "reactNativeComponentDefault": {
    "prefix": "rnfd",
    "body": [
      "import React, { useCallback, useEffect, useMemo, useState } from 'react';",
      "import { Text, View } from 'react-native';",
      "import PropTypes from 'prop-types';",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}(props) {",
      "",
      "  return (",
      "    <View>",
      "        <Text>${2:${TM_FILENAME_BASE}}</Text>",
      "    </View>",
      "  );",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "",
      "};",
      "",
      "${1:${TM_FILENAME_BASE}}.defaultProps = {",
      "",
      "};",
      ""
    ],
    "description": "React Native Functional Component with default export"
  },
  "reactNativeMemoComponent": {
    "prefix": "rnfm",
    "body": [
      "import React, { useCallback, useEffect, useMemo, useState } from 'react';",
      "import { Text, View } from 'react-native';",
      "import PropTypes from 'prop-types';",
      "",
      "export function ${1:${TM_FILENAME_BASE}}(props) {",
      "",
      "  return (",
      "    <View>",
      "        <Text>${2:${TM_FILENAME_BASE}}</Text>",
      "    </View>",
      "  );",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "",
      "};",
      "",
      "${1:${TM_FILENAME_BASE}}.defaultProps = {",
      "",
      "};",
      "",
      "export default React.memo(${1:${TM_FILENAME_BASE}});",
      ""
    ],
    "description": "React Native Functional Component with React.memo default export"
  },
  // React Redux
  "reactReduxImport": {
    "prefix": "rdxi",
    "body": [
      "import { useDispatch, useSelector } from 'react-redux';"
    ],
    "description": "React Redux hook imports"
  },
  // Hooks
  "useEffect": {
    "prefix": "uef",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "}, [$2]);"
    ],
    "description": "useEffect hook"
  },
  "useState": {
    "prefix": "ust",
    "body": [
      "const [$1, $2] = useState($3);"
    ],
    "description": "useState hook"
  },
  "useMemo": {
    "prefix": "ume",
    "body": [
      "const $1 = useMemo(($2) => $3, [$4]);"
    ],
    "description": "useMemo hook"
  },
  "useCallback": {
    "prefix": "uca",
    "body": [
      "const $1 = useCallback(($2) => {",
      "\t$3",
      "}, [$4]);"
    ],
    "description": "useCallback hook"
  },
  "useDispatch": {
    "prefix": "udi",
    "body": [
      "const dispatch = useDispatch();"
    ],
    "description": "useDispatch hook"
  },
  "useSelector": {
    "prefix": "usl",
    "body": [
      "const $1 = useSelector($2);"
    ],
    "description": "useSelector hook"
  },
  // PropTypes
  "PropTypes": {
    "prefix": "pt",
    "body": [
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "$2",
      "};"
    ],
    "description": "Create PropTypes"
  },
  "defaultProps": {
    "prefix": "dfp",
    "body": [
      "${1:${TM_FILENAME_BASE}}.defaultProps = {",
      "$2",
      "};"
    ],
    "description": "Create Default Props"
  },
  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "ptone",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values"
  },
  "propTypeEnumRequired": {
    "prefix": "ptoner",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values required"
  },
  "propTypeOneOfType": {
    "prefix": "ptonet",
    "body": [
      "PropTypes.oneOfType([",
      "  $0",
      "]),"
    ],
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptonetr",
    "body": [
      "PropTypes.oneOfType([",
      "  $0",
      "]).isRequired,"
    ],
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "AcomponentNamen array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": [
      "PropTypes.shape({",
      "  $0",
      "}),"
    ],
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": [
      "PropTypes.shape({",
      "  $0",
      "}).isRequired,"
    ],
    "description": "An object taking on a particular shape required"
  },
  // JS
  "consoleLog": {
    "prefix": "clg",
    "body": "console.log($1)",
    "description": "Displays a message in the console"
  }
}
